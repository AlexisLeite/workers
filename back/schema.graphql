# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

input CreateInitialWorkerInput {
  name: String
  birthDate: DateTime
  phone: String
  address: String
  password: String
  role: RoleRelateToOneForCreateInput
}

type Mutation {
  createInitialWorker(
    data: CreateInitialWorkerInput!
  ): WorkerAuthenticationWithPasswordSuccess!
  authenticateWorkerWithPassword(
    name: String!
    password: String!
  ): WorkerAuthenticationWithPasswordResult!
  createWorker(data: WorkerCreateInput!): Worker
  createWorkers(data: [WorkerCreateInput!]!): [Worker]
  updateWorker(where: WorkerWhereUniqueInput!, data: WorkerUpdateInput!): Worker
  updateWorkers(data: [WorkerUpdateArgs!]!): [Worker]
  deleteWorker(where: WorkerWhereUniqueInput!): Worker
  deleteWorkers(where: [WorkerWhereUniqueInput!]!): [Worker]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createTask(data: TaskCreateInput!): Task
  createTasks(data: [TaskCreateInput!]!): [Task]
  updateTask(where: TaskWhereUniqueInput!, data: TaskUpdateInput!): Task
  updateTasks(data: [TaskUpdateArgs!]!): [Task]
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteTasks(where: [TaskWhereUniqueInput!]!): [Task]
  createTaskImage(data: TaskImageCreateInput!): TaskImage
  createTaskImages(data: [TaskImageCreateInput!]!): [TaskImage]
  updateTaskImage(
    where: TaskImageWhereUniqueInput!
    data: TaskImageUpdateInput!
  ): TaskImage
  updateTaskImages(data: [TaskImageUpdateArgs!]!): [TaskImage]
  deleteTaskImage(where: TaskImageWhereUniqueInput!): TaskImage
  deleteTaskImages(where: [TaskImageWhereUniqueInput!]!): [TaskImage]
  endSession: Boolean!
}

union AuthenticatedItem = Worker

union WorkerAuthenticationWithPasswordResult =
    WorkerAuthenticationWithPasswordSuccess
  | WorkerAuthenticationWithPasswordFailure

type WorkerAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Worker!
}

type WorkerAuthenticationWithPasswordFailure {
  message: String!
}

type Worker {
  id: ID!
  name: String
  birthDate: DateTime
  admissionDate: DateTime
  phone: String
  address: String
  password: PasswordState
  tasks(
    where: TaskWhereInput! = {}
    orderBy: [TaskOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Task!]
  tasksCount(where: TaskWhereInput! = {}): Int
  role: Role
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type PasswordState {
  isSet: Boolean!
}

input WorkerWhereUniqueInput {
  id: ID
  name: String
}

input WorkerWhereInput {
  AND: [WorkerWhereInput!]
  OR: [WorkerWhereInput!]
  NOT: [WorkerWhereInput!]
  id: IDFilter
  name: StringFilter
  birthDate: DateTimeFilter
  admissionDate: DateTimeFilter
  phone: StringFilter
  address: StringFilter
  tasks: TaskManyRelationFilter
  role: RoleWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input TaskManyRelationFilter {
  every: TaskWhereInput
  some: TaskWhereInput
  none: TaskWhereInput
}

input WorkerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  birthDate: OrderDirection
  admissionDate: OrderDirection
  phone: OrderDirection
  address: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input WorkerUpdateInput {
  name: String
  birthDate: DateTime
  admissionDate: DateTime
  phone: String
  address: String
  password: String
  tasks: TaskRelateToManyForUpdateInput
  role: RoleRelateToOneForUpdateInput
}

input TaskRelateToManyForUpdateInput {
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input WorkerUpdateArgs {
  where: WorkerWhereUniqueInput!
  data: WorkerUpdateInput!
}

input WorkerCreateInput {
  name: String
  birthDate: DateTime
  admissionDate: DateTime
  phone: String
  address: String
  password: String
  tasks: TaskRelateToManyForCreateInput
  role: RoleRelateToOneForCreateInput
}

input TaskRelateToManyForCreateInput {
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Role {
  id: ID!
  label: String
  code: String
  workers(
    where: WorkerWhereInput! = {}
    orderBy: [WorkerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Worker!]
  workersCount(where: WorkerWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  label: StringFilter
  code: StringFilter
  workers: WorkerManyRelationFilter
}

input WorkerManyRelationFilter {
  every: WorkerWhereInput
  some: WorkerWhereInput
  none: WorkerWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  label: OrderDirection
  code: OrderDirection
}

input RoleUpdateInput {
  label: String
  code: String
  workers: WorkerRelateToManyForUpdateInput
}

input WorkerRelateToManyForUpdateInput {
  disconnect: [WorkerWhereUniqueInput!]
  set: [WorkerWhereUniqueInput!]
  create: [WorkerCreateInput!]
  connect: [WorkerWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  label: String
  code: String
  workers: WorkerRelateToManyForCreateInput
}

input WorkerRelateToManyForCreateInput {
  create: [WorkerCreateInput!]
  connect: [WorkerWhereUniqueInput!]
}

type Task {
  id: ID!
  details: String
  images(
    where: TaskImageWhereInput! = {}
    orderBy: [TaskImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TaskImage!]
  imagesCount(where: TaskImageWhereInput! = {}): Int
  creationDate: DateTime
  worker: Worker
  status: String
}

input TaskWhereUniqueInput {
  id: ID
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  id: IDFilter
  details: StringFilter
  images: TaskImageManyRelationFilter
  creationDate: DateTimeNullableFilter
  worker: WorkerWhereInput
  status: StringNullableFilter
}

input TaskImageManyRelationFilter {
  every: TaskImageWhereInput
  some: TaskImageWhereInput
  none: TaskImageWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input TaskOrderByInput {
  id: OrderDirection
  details: OrderDirection
  creationDate: OrderDirection
  status: OrderDirection
}

input TaskUpdateInput {
  details: String
  images: TaskImageRelateToManyForUpdateInput
  creationDate: DateTime
  worker: WorkerRelateToOneForUpdateInput
  status: String
}

input TaskImageRelateToManyForUpdateInput {
  disconnect: [TaskImageWhereUniqueInput!]
  set: [TaskImageWhereUniqueInput!]
  create: [TaskImageCreateInput!]
  connect: [TaskImageWhereUniqueInput!]
}

input WorkerRelateToOneForUpdateInput {
  create: WorkerCreateInput
  connect: WorkerWhereUniqueInput
  disconnect: Boolean
}

input TaskUpdateArgs {
  where: TaskWhereUniqueInput!
  data: TaskUpdateInput!
}

input TaskCreateInput {
  details: String
  images: TaskImageRelateToManyForCreateInput
  creationDate: DateTime
  worker: WorkerRelateToOneForCreateInput
  status: String
}

input TaskImageRelateToManyForCreateInput {
  create: [TaskImageCreateInput!]
  connect: [TaskImageWhereUniqueInput!]
}

input WorkerRelateToOneForCreateInput {
  create: WorkerCreateInput
  connect: WorkerWhereUniqueInput
}

type TaskImage {
  id: ID!
  url: String
  task: Task
}

input TaskImageWhereUniqueInput {
  id: ID
}

input TaskImageWhereInput {
  AND: [TaskImageWhereInput!]
  OR: [TaskImageWhereInput!]
  NOT: [TaskImageWhereInput!]
  id: IDFilter
  url: StringFilter
  task: TaskWhereInput
}

input TaskImageOrderByInput {
  id: OrderDirection
  url: OrderDirection
}

input TaskImageUpdateInput {
  url: String
  task: TaskRelateToOneForUpdateInput
}

input TaskRelateToOneForUpdateInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
  disconnect: Boolean
}

input TaskImageUpdateArgs {
  where: TaskImageWhereUniqueInput!
  data: TaskImageUpdateInput!
}

input TaskImageCreateInput {
  url: String
  task: TaskRelateToOneForCreateInput
}

input TaskRelateToOneForCreateInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  authenticatedItem: AuthenticatedItem
  workers(
    where: WorkerWhereInput! = {}
    orderBy: [WorkerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Worker!]
  worker(where: WorkerWhereUniqueInput!): Worker
  workersCount(where: WorkerWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  tasks(
    where: TaskWhereInput! = {}
    orderBy: [TaskOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Task!]
  task(where: TaskWhereUniqueInput!): Task
  tasksCount(where: TaskWhereInput! = {}): Int
  taskImages(
    where: TaskImageWhereInput! = {}
    orderBy: [TaskImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TaskImage!]
  taskImage(where: TaskImageWhereUniqueInput!): TaskImage
  taskImagesCount(where: TaskImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
